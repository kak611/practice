LSB of even is always 0 whereas LSB of odd is 1
MSB of +ve num is always 0 whereas MSB of -ve num is 1
====
1 << 2 is left-shift 2
	so output is 1 * (2^2)
	0001 becomes 0100
4 << 1 is (4 * 2^1)
	0100 becomes 1000
====

>> (arithmetic mean preserve signedness) vs >>> (logical)

>> is arithmetic shift right, >>> is logical shift right.
In an arithmetic shift, the sign bit is extended to preserve the signedness of the number.

For example: -2 represented in 8 bits would be 11111110 (because the most significant bit has negative weight). Shifting it right one bit using arithmetic shift would give you 11111111, or -1. Logical right shift, however, does not care that the value could possibly represent a signed number; it simply moves everything to the right and fills in from the left with 0s. Shifting our -2 right one bit using logical shift would give 01111111.

For positive number, >>> or >> will fill LSB with zeros
	0010 >> 1 is 0001
	0010 >>> 1 is 0001
====

5 >>> 1 is right-shift 1  (MSB is 0)	
	so output is 5 / (2^1)
	0101 becomes 0010

5 >>> 2 is 5 / (2^2)	
	first write binary of 5 0101
	right shift by 2 0001

====
If the number is negative, then 1 is used as a filler and if the number is positive, then 0 is used as a filler. For example, if binary representation of number is 10….100, then right shifting it by 2 using >> will make it 11…….1.

9 >> 1 is right-shift 1 (MSB is 0)
	so output is 9 / (2^1) = 4
	00000000 00001001 becomes 
	00000000 00000100
	
-9 >> 1 is right-shift 1 (MSB is 1)
	so output is -9 / (2^1) = -4
	11111111 11111001 becomes 
        11111111 11111100
====
If X is odd, its LSB is always 1
	X & 1 will either give 1 or 0
and,
	num ^= (X & 1) also called modulo 2 i.e. %2 is either 1 or 0
	where num is 0 or 1
====

if X is -ve, its MSB is always 1
   Negative of X is two`s complement of X	(i.e. ~X + 1)
OR Negative of X is ~(x-1)
   i.e. Negative of 5 is ~4 (inverted 4)
OR   	inverted 3 is -4 	(simple to remember)
  	inverted 4 is -5	(simple to remember)

x & ~(x-1) means Number ANDed with its negative. This will isolates lowest bit which is set to 1
For e.g, 5 & -5 
	0101
	1011
	====
	0001  (only LSB in output)

XOR the output with number will set the bit to 0 (xor flips bit)
x ^ y  = x ^ (x & ~(x-1)) = 0001 ^ 0101 = 0100

OR simpler is x & (x-1) also sets lowest bit 1 to 0


======
To get a binary of any number say 27
	Get the closest power of 2 <=27 i.e. 16
	16 is 2^4 (note 4 which is 5th bit) For e.g.
		4 3 2 1 0 (power of 2)
		_ _ _ _ _ (ith bit)

	Then find number closest to 11 (i.e. 27-16) which is 8
	8 is 2^3 (note 3)

	Then find number closest to 3 (i.e. 11-8) which is 2
	2 is 2^1 (note 1)

	Then find number closest to 1 (i.e. 3-2) which is 1
	1 is 2^0 (note 0)

So the binary of 27 is set 4, 3, 1, 0th bit to 1
				
27 =>	 0   0   0   1   1   0   1   1 
	7th 6th 5th 4th 3rd 2nd 1st 0th
	 0 + 0 + 0 + 16 + 8 + 0 + 2 + 1	
					